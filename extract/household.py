from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from time import sleep
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
import re
import pandas as pd

# 해당 url과 연결
#service = Service('./drivers/chromedriver.exe')
#driver = webdriver.Chrome(service=service)
driver = webdriver.Chrome(executable_path='./drivers/chromedriver')
target_url = 'https://www.kesis.net/sub/subChart.jsp?M_MENU_ID=M_M_001&S_MENU_ID=S_M_003&report_id=7060202&reportCd=7060202&chartCategory=line&minYN=2014&reportType=0'
driver.get(target_url)

# 3초 sleep
sleep(3)

driver.find_element(By.CLASS_NAME,'btnChart.ico_change').click()

# 스크롤 옆으로 끝까지 내리기
itemlist = driver.find_element(By.XPATH, '//*[@id="mySheet1-table"]/tbody/tr[5]/td[2]/div/div')
driver.execute_script('arguments[0].scrollBy(15000,0);', itemlist)

sleep(2)
soup = BeautifulSoup(driver.page_source, 'html.parser')
sleep(2)


###열이름###
#열이름 doc 뽑아내기
doc_column_name_list = soup.select('#mySheet1-table table[class=GMSection]')[1].select('tr')[2].select('td')

#열이름 list 준비 + 불필요한 데이터 제거
purpose_dic = {0: '합계', 1: '가정용', 2: '영업용', 3: '업무용', 4: '산업용', 5: '열병합·집단에너지', 6: '수송용'}
column_name_list = ['날짜']
doc_column_name_list.pop(0)

#열이름 list생성
for idx, doc_column_name in enumerate(doc_column_name_list):
    #'강원 }' 같은 column_name 처리
    column_name_list.append(tuple([(re.sub('}', '', doc_column_name.text).strip()), purpose_dic[idx//18]]))

#print(column_name_list)
#['날짜', ('전국', '합계'), ('서울', '합계'), ('부산', '합계'), ('대구', '합계'), ('인천', '합계'), ('광주', '합계'), ('대전', '합계'), ('울산', '합계'), ('세종', '합계'), ('경기', '합계'), ('강원', '합계'), ('충북', '합계'), ('충남', '합계'), ('전북', '합계'), ('전남', '합계'), ('경북', '합계'), ('경남', '합계'), ('제주', '합계'), ('전국', '가정용'), ('서울', '가정용'), ('부산', '가정용'), ('대구', '가정용'), ('인천', '가정용'), ('광주', '가정용'), ('대전', '가정용'), ('울산', '가정용'), ('세종', '가정용'), ('경기', '가정용'), ('강원', '가정용'), ('충북', '가정용'), ('충남', '가정용'), ('전북', '가정용'), ('전남', '가정용'), ('경북', '가정용'), ('경남', '가정용'), ('제주', '가정용'), ('전국', '영업용'), ('서울', '영업용'), ('부산', '영업용'), ('대구', '영업용'), ('인천', '영업용'), ('광주', '영업용'), ('대전', '영업용'), ('울산', '영업용'), ('세종', '영업용'), ('경기', '영업용'), ('강원', '영업용'), ('충북', '영업용'), ('충남', '영업용'), ('전북', '영업용'), ('전남', '영업용'), ('경북', '영업용'), ('경남', '영업용'), ('제주', '영업용'), ('전국', '업무용'), ('서울', '업무용'), ('부산', '업무용'), ('대구', '업무용'), ('인천', '업무용'), ('광주', '업무용'), ('대전', '업무용'), ('울산', '업무용'), ('세종', '업무용'), ('경기', '업무용'), ('강원', '업무용'), ('충북', '업무용'), ('충남', '업무용'), ('전북', '업무용'), ('전남', '업무용'), ('경북', '업무용'), ('경남', '업무용'), ('제주', '업무용'), ('전국', '산업용'), ('서울', '산업용'), ('부산', '산업용'), ('대구', '산업용'), ('인천', '산업용'), ('광주', '산업용'), ('대전', '산업용'), ('울산', '산업용'), ('세종', '산업용'), ('경기', '산업용'), ('강원', '산업용'), ('충북', '산업용'), ('충남', '산업용'), ('전북', '산업용'), ('전남', '산업용'), ('경북', '산업용'), ('경남', '산업용'), ('제주', '산업용'), ('전국', '열병합·집단에너지'), ('서울', '열병합·집단에너지'), ('부산', '열병합·집단에너지'), ('대구', '열병합·집단에너지'), ('인천', '열병합·집단에너지'), ('광주', '열병합·집단에너지'), ('대전', '열병합·집단에너지'), ('울산', '열병합·집단에너지'), ('세종', '열병합·집단에너지'), ('경기', '열병합·집단에너지'), ('강원', '열병합·집단에너지'), ('충북', '열병합·집단에너지'), ('충남', '열병합·집단에너지'), ('전북', '열병합·집단에너지'), ('전남', '열병합·집단에너지'), ('경북', '열병합·집단에너지'), ('경남', '열병합·집단에너지'), ('제주', '열병합·집단에너지'), ('전국', '수송용'), ('서울', '수송용'), ('부산', '수송용'), ('대구', '수송용'), ('인천', '수송용'), ('광주', '수송용'), ('대전', '수송용'), ('울산', '수송용'), ('세종', '수송용'), ('경기', '수송용'), ('강원', '수송용'), ('충북', '수송용'), ('충남', '수송용'), ('전북', '수송용'), ('전남', '수송용'), ('경북', '수송용'), ('경남', '수송용'), ('제주', '수송용')]


###열(날짜)###
doc_tr_list = soup.select('#mySheet1-table table[class=GMSection]')[2].select('tr')
date_list = []

#첫번째 tr은 불필요한 데이터
for i in range(len(doc_tr_list)-1):
    date_list.append(doc_tr_list[i+1].select('b')[0].text)

#print(date_list)
#['2014', '2015', '2016', '2017', '2018', '2019', '2020']

doc_tr_list = soup.select('#mySheet1-table table[class=GMSection]')[3].select('tr')
doc_tr_list.pop(0)

household_df = pd.DataFrame(columns=column_name_list)

id_num = 0
#행별 데이터 추출
for idx, doc_tr in enumerate(doc_tr_list):
    doc_data_list = doc_tr.select('td')
    doc_data_list.pop(0)
    data_row = [date_list[idx]]
    #열 데이터 추가
    for doc_data in doc_data_list:
        data_row.append(doc_data.text)

    household_df.loc[id_num] = data_row
    id_num += 1
    #print(data_row)
    #['16,883,279', '4,283,901', '1,226,316', '875,273', '1,054,506', '597,581', '576,565', '411,843', '46,691', '4,245,877', '284,489', '426,335', '490,079', '498,137', '343,891', '657,922', '846,171', '17,702', '16,129,913', '4,013,249', '1,178,096', '849,130', '1,017,262', '571,281', '553,353', '394,558', '45,319', '4,088,970', '274,581', '405,189', '476,918', '483,315', '333,514', '636,969', '790,650', '17,559', '508,750', '162,849', '40,955', '19,979', '21,018', '17,119', '15,730', '13,933', '1,037', '103,083', '6,574', '13,824', '8,204', '9,867', '7,468', '15,303', '51,700', '107', '228,184', '105,401', '6,237', '4,738', '15,357', '8,401', '7,214', '2,980', '279', '49,220', '3,056', '6,845', '4,424', '4,391', '2,365', '4,734', '2,506', '36', '15,078', '2,013', '992', '1,356', '808', '739', '220', '364', '55', '4,088', '222', '464', '515', '548', '516', '895', '1,283', '0', '1,159', '356', '20', '61', '46', '35', '43', '3', '1', '457', '42', '10', '16', '11', '22', '15', '21', '0', '195', '33', '16', '9', '15', '6', '5', '5', '0', '59', '14', '3', '2', '5', '6', '6', '11', '0']

household_df.to_csv("/home/big/predict_gas/raw_data/household/household.csv", index=True)
